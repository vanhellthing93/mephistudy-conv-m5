name: Deploy

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
on:
  workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: Checkout 
        uses: actions/checkout@v4.1.1
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          fetch-depth: 0

      - name: Install ssh keys
        # uses: arwynfr/actions-docker-context@v2
        # with:
        #   docker_host: 'ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PORT }}'
        #   context_name: 'remote'
        #   ssh_cert: ${{ secrets.SSH_CERT }}
        #   ssh_key: ${{ secrets.SSH_KEY }}        
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ../private.key
          sudo chmod 600 ../private.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
           # SSH_KEY_PATH: ${{ github.workspace }}/../private.key
        # install -m 600 -D /dev/null ~/.ssh/id_rsa
        # echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        # ssh-keyscan -H 5.189.223.132 > ~/.ssh/known_hosts
        # echo "SSH key installed and known_hosts updated"
        # docker context create remote --docker host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PORT }}
        # echo "Docker context created" ${{ secrets.SSH_HOST }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker compose
        env:
          IMAGE_REF: ${{ steps.meta.outputs.tags }}
          # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
                    # docker-compose --context remote -f docker-compose.yml up -d
        run: |
          docker --context remote stack deploy --compose-file docker-compose.yml my-flask

      - name: cleanup
        run: rm -rf ~/.ssh